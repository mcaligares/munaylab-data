buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

version "0.1"
group "org.munaylab.data"

apply plugin:"idea"
apply plugin:"eclipse"
//apply plugin:"org.grails.grails-doc"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-services"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    console "org.grails:grails-console"
    profile "org.grails.profiles:plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "cglib:cglib-nodep:2.2.2"
    testCompile "org.objenesis:objenesis:1.4"
}

groovydoc {
    destinationDir = new File('docs')
    docTitle = 'MunayLab Data Plugin'
    windowTitle = 'MunayLab Data Plugin API'
    excludes = ['**/Application.groovy', '**/BootStrap.groovy', '**/*GrailsPlugin.groovy']
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

bootRepackage.enabled = false
grailsPublish {
    user = 'team@munaylab.com'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'GPL3'
    }
    title = "Data Module"
    desc = "Munaylab Data Module"
    developers = [team:"team@munaylab.org"]
}

test {
    testLogging.exceptionFormat = 'full'
    testLogging.showStandardStreams = true
    if (project.hasProperty("log")) {
        beforeTest { descriptor ->
            String fullClassName = descriptor.className
            String className = fullClassName.substring(fullClassName.indexOf('munaylab.') + 9)
            print "> [${className.replace('Spec', '')}] - ${descriptor.name}"
        }
        afterTest { descriptor, result ->
            String RED = '\u001B[31m'
            String RESET = '\u001B[0m'
            String GREEN = '\u001B[32m'
            if (result.resultType == TestResult.ResultType.SUCCESS) {
                println "$GREEN \u2714 $RESET"
            } else {
                println "$RED \u2716 $RESET"
            }
        }
    }
}

task tdd {
  inputs.files 'src/test'
  dependsOn test
}
